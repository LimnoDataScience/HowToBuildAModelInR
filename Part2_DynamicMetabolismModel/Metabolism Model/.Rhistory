source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
source('~/Dropbox/Hanson/Projects/CNH/Aviah_PCyclingModel_12_21/PCyclingModel_12_21.R')
12258-7800
8548-7800
700 * 28
69*32/1000
4173-1800
4173-2800
(1250-185)/2
237/60
413 / 0.95
164000*0.014
164000*0.013
163000*0.013
219-88
1700/12
29/35 * 230
29/35 * 23
5271-3649
365/5*38
2*1000/12
170*1000/12
170*12/1000
2147-1910
(2147-1910)*12
80*0.05+80*0.28
80-26.4
365/20*74
177 * (365/(31+28+13))
181 * (365/(31+28+15))
12/32
110+250+210
110+250+210+307
877/2
877/2 - 307
570-132
9376-528-4900
9376-529
8847-4950
3897/2
225 * (365/(31+28+31))
9761*4
1445 * 12
100*1+ 60*8 +90*2
10^0.5
10^-0.5
10^-1
0.9/2.9
0.6/2.9
1.4/2.0
1.4/2.9
log10(0.6)
31.25*24
2000^0.5
0.01/365
10/365
.639/0.08
.639/0.03
.639/0.0001
.639/0.0001/365
1/365
.639/0.003
365/(31+28+31+25)*263
365/(31+28+31+30+5)*276
297 * 365/(31+28+31+30+20)
88/0.75
system('docker run -i -t -v /Users/paul/Documents/GLMSims/V30Mendota10_Feb_2019:/GLM/MendotaByPaul hydrobert/glm-aed2 /bin/bash')
# get the id of container
dockerps <- system('docker ps', intern = TRUE)
dockerid <- strsplit(dockerps, split = "/t")
dockerid <- dockerid[[2]][1]
dockerid
paste('docker exec -ti',dockerid,'bin/bash -c \"cd MendotaByPaul; /GLM/glm\"')
# start the simulation
system(paste('docker exec -ti',dockerid,'bin/bash -c \"cd MendotaByPaul; /GLM/glm\"'))
164/2
430+274+275+212
430+274+275+212+42+80+42+42+90+42+85+54
124/20
4000000/20000
37000000/124000
5*1000/12
376*(365/(31+28+30+31+27))
date()
ydate(date())
day(date())
Day(date())
library(lubridate)
day(date())
date()
today()
day(today())
as.POSIXct(today())
date<-as.POSIXct(today())
myDate<-as.POSIXct(today())
myDate
myDate$
yday
format(myDate,"%j")
376*(365/181)
189092/2
189092/2
24889/2
(3375+5750)/2
365/(31+28+31+30+31+30+14)*410
(7250+6950+6400+6000+9000+3500)/6
420*(365/(31+28+31+30+31+30+22))
120*15
15*50
1800+750+200
70+100+220+156+295+103
6100 - 2200
474*365/(31+28+31+30+31+30+31+20)
10/(365*53)
10/(365*53)*100
176/8
setwd("~/Dropbox/Hanson/MyModels/MetabolismMendota")
source('MetabolismHelpers.R')
source('Metabolism.R')
source('PlotMetabResultsLastSim.R')
source('PlotLongTermResults.R')
source('PlotMetabResultsAllSims.R')
source('PlotMetabResultsAllSimsAnnualSummaries.R')
source('SummarizeMetabResults.R')
source('ExploreLakePhosphorus.R')
source('SaveAsLakeFile.R')
# source('./LakePhysics/1D_HeatMixing/1D_HeatMixing_functions_metabolism.R')
source('./LakePhysics/1D_HeatMixing/1D_LakeModel_functions.R')
source('ComparePredictionsObservations.R')
source('PlotLongTermRecovery.R')
# Load lake metabolizer for dissolved gas functions
library(LakeMetabolizer)
library(tidyverse)
source("~/Dropbox/Hanson/MyModels/MetabolismMendota/PlotLongTermRecovery.R")
OutputFileNames = read.csv('./Output/Mendota_zero_Pload_2_20.csv')
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
source("~/Dropbox/Hanson/MyModels/MetabolismMendota/PlotLongTermRecovery.R")
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,PrintResults=FALSE
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,PrintResults=FALSE)
source("~/Dropbox/Hanson/MyModels/MetabolismMendota/PlotLongTermRecovery.R")
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,PrintResults=FALSE)
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,PrintResults=FALSE)
source("~/Dropbox/Hanson/MyModels/MetabolismMendota/PlotLongTermRecovery.R")
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
source("~/Dropbox/Hanson/MyModels/MetabolismMendota/PlotLongTermRecovery.R")
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
source("~/Dropbox/Hanson/MyModels/MetabolismMendota/PlotLongTermRecovery.R")
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
source("~/Dropbox/Hanson/MyModels/MetabolismMendota/PlotLongTermRecovery.R")
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,FALSE)
PlotLongTermRecovery(OutputFileNames,TurnDay=NA,TRUE)
setwd("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model")
#Load the data. We want
doobs = read.table("Data/Mendota.doobs", #This is the file name
header=T, #This says that there *is* a header in the file
sep="\t", #This says the column separator is a tab
colClasses=c(dateTime="POSIXct")) #This says the column "dateTime" is in a POSIXct format, which is date/time in R
wtr = read.table("Data/Mendota.wtr",header=T,sep="\t",colClasses=c(dateTime="POSIXct"))
par = read.table("Data/Mendota.par",header=T,sep="\t",colClasses=c(dateTime="POSIXct"))
##Now lets plot the data quick
plot(doobs$dateTime,doobs[,2],type="l")
title("doobs")
plot(wtr$dateTime,wtr[,3],type="l")
title("Water Temp")
plot(par$dateTime,par[,2],type="l")
title("PAR")
plot(par[1:100,2],type="l")
len = 10000
doPredic = vector(mode="double",length=len)
wTemp = wtr[,3]
par = par[,2]
doPredic[1] = doobs[1,2]
zmix = 8  # (meters) depth of thermocline
dt = 1/48  # (min) This is 30 minutes
fatm = 0
gpp = 0
R = 0
dosat = 0
phyto = 7
Theta1 = 1.07
c1 = 0.012
c2 = 0
k = 0.15   # (meters/day) Exchange coefficient (usually depends on wind and turbulence)
for(i in 2:len){
if(is.na(wTemp[i])){
wTemp[i] = wTemp[i-1]
}
if(is.na(par[i])){
par[i] = par[i-1]
}
dosat[i] = -0.00006 * wTemp[i]^3 + 0.0069 * wTemp[i]^2 - 0.3906 * wTemp[i] + 14.578
fatm[i] = (dosat[i] - doPredic[i-1]) * k * zmix * dt #units should be mg/L/30min
gpp[i] = dt * par[i] * c1
#R(i) = dT * C2 * Theta^(T(i-1)-20) * Phyto;
R[i] = dt * c2 * phyto * Theta1^(wTemp[i] - 20)
doPredic[i] = doPredic[i-1] + fatm[i] + gpp[i] - R[i]
}
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
length(wTemp)
dim(doobs)
head(doobs)
head(wTemp)
plot(wTemp,doobs$DO)
# Plot DO as a function of temperature
plot(wTemp,doobs$DO,ylab='DO (mg/L)',xlab='Water temp (c)',main="",cex=1.1)
# Plot DO as a function of temperature
plot(wTemp,doobs$DO,ylab='DO (mg/L)',xlab='Water temp (c)',main="",cex=1.3)
# Plot DO as a function of temperature
plot(wTemp,doobs$DO,ylab='DO (mg/L)',xlab='Water temp (c)',main="",cex=1.3)
##Now lets plot the data quick
plot(doobs$dateTime,doobs[,2],type="l")
##Now lets plot the data quick
plot(doobs$dateTime,doobs[,2],type="l",ylab='DO (mg/L)')
# title("doobs")
plot(wtr$dateTime,wtr[,3],type="l",ylab='Water temp (C)')
# title("Water Temp")
plot(par$dateTime,par[,2],type="l",ylab='PAR')
32/12
# Plot DO as a function of temperature
plot(wTemp,doobs$DO,ylab='DO (mg/L)',xlab='Water temp (c)',main="",cex=1.3)
##Now lets plot the data quick
plot(doobs$dateTime,doobs[,2],type="l",ylab='DO (mg/L)')
# title("doobs")
plot(wtr$dateTime,wtr[,3],type="l",ylab='Water temp (C)')
# title("Water Temp")
plot(par$dateTime,par[,2],type="l",ylab='PAR')
# title("PAR")
plot(par[1:100,2],type="l")
dim(par)
par
length(par)
head(par)
# title("PAR")
plot(par[1:100],type="l")
# title("Water Temp")
plot(par$dateTime,par[,2],type="l",ylab='PAR')
par = read.table("Data/Mendota.par",header=T,sep="\t",colClasses=c(dateTime="POSIXct"))
head(par)
# title("Water Temp")
plot(par$dateTime,par[,2],type="l",ylab='PAR')
doPredic = vector(mode="double",length=len)
wTemp = wtr[,3]
par = par[,2]
doPredic[1] = doobs[1,2]
zmix = 8  # (meters) depth of thermocline
dt = 1/48  # (min) This is 30 minutes
fatm = 0
gpp = 0
R = 0
dosat = 0
phyto = 7
Theta1 = 1.07
c1 = 0.012
c2 = 0
k = 0.15   # (meters/day) Exchange coefficient (usually depends on wind and turbulence)
for(i in 2:len){
if(is.na(wTemp[i])){
wTemp[i] = wTemp[i-1]
}
if(is.na(par[i])){
par[i] = par[i-1]
}
dosat[i] = -0.00006 * wTemp[i]^3 + 0.0069 * wTemp[i]^2 - 0.3906 * wTemp[i] + 14.578
fatm[i] = (dosat[i] - doPredic[i-1]) * k * zmix * dt #units should be mg/L/30min
gpp[i] = dt * par[i] * c1
#R(i) = dT * C2 * Theta^(T(i-1)-20) * Phyto;
R[i] = dt * c2 * phyto * Theta1^(wTemp[i] - 20)
doPredic[i] = doPredic[i-1] + fatm[i] + gpp[i] - R[i]
}
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
c1 = 0.0012
c2 = 0
k = 0.15   # (meters/day) Exchange coefficient (usually depends on wind and turbulence)
# Cycle through the model with 48 time steps per day (i.e., every 30 min)
for(i in 2:len){
# if water temp is missing, use previous value
if(is.na(wTemp[i])){
wTemp[i] = wTemp[i-1]
}
# if PAR is missing, use previous value
if(is.na(par[i])){
par[i] = par[i-1]
}
# Calculate the saturation value of dissolved oxygen as a function of temperature
dosat[i] = -0.00006 * wTemp[i]^3 + 0.0069 * wTemp[i]^2 - 0.3906 * wTemp[i] + 14.578
# Atmospheric exchange
fatm[i] = (dosat[i] - doPredic[i-1]) * k * zmix * dt #units should be mg/L/30min
# Primary production
gpp[i] = dt * par[i] * phyto * c1
# R as a function of phyto biomass
#R(i) = dT * C2 * Theta^(T(i-1)-20) * Phyto;
R[i] = dt * c2 * phyto * Theta1^(wTemp[i] - 20)
# Mass balance equation for dissolved oxygen
doPredic[i] = doPredic[i-1] + fatm[i] + gpp[i] - R[i]
}
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
phyto = 7 # Assumed value of phytoplankton biomass ug/L
Theta1 = 1.1 #
c1 = 0.0012
c2 = 0
k = 0.15   # (meters/day) Exchange coefficient (usually depends on wind and turbulence)
# Cycle through the model with 48 time steps per day (i.e., every 30 min)
for(i in 2:len){
# if water temp is missing, use previous value
if(is.na(wTemp[i])){
wTemp[i] = wTemp[i-1]
}
# if PAR is missing, use previous value
if(is.na(par[i])){
par[i] = par[i-1]
}
# Calculate the saturation value of dissolved oxygen as a function of temperature
dosat[i] = -0.00006 * wTemp[i]^3 + 0.0069 * wTemp[i]^2 - 0.3906 * wTemp[i] + 14.578
# Atmospheric exchange
fatm[i] = (dosat[i] - doPredic[i-1]) * k * zmix * dt #units should be mg/L/30min
# Primary production
gpp[i] = dt * par[i] * phyto * c1
# R as a function of phyto biomass
#R(i) = dT * C2 * Theta^(T(i-1)-20) * Phyto;
R[i] = dt * c2 * phyto * Theta1^(wTemp[i] - 20)
# Mass balance equation for dissolved oxygen
doPredic[i] = doPredic[i-1] + fatm[i] + gpp[i] - R[i]
}
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
phyto = 7 # Assumed value of phytoplankton biomass ug/L
Theta1 = 1.1 #
c1 = 0.0012
c2 = 0
k = 0.15   # (meters/day) Exchange coefficient (usually depends on wind and turbulence)
# Cycle through the model with 48 time steps per day (i.e., every 30 min)
for(i in 2:len){
# if water temp is missing, use previous value
if(is.na(wTemp[i])){
wTemp[i] = wTemp[i-1]
}
# if PAR is missing, use previous value
if(is.na(par[i])){
par[i] = par[i-1]
}
# Calculate the saturation value of dissolved oxygen as a function of temperature
dosat[i] = -0.00006 * wTemp[i]^3 + 0.0069 * wTemp[i]^2 - 0.3906 * wTemp[i] + 14.578
# Atmospheric exchange
fatm[i] = (dosat[i] - doPredic[i-1]) * k * zmix * dt #units should be mg/L/30min
# Primary production
gpp[i] = dt * par[i] * phyto * c1 * Theta1^(wTemp[i] - 20)
# R as a function of phyto biomass
#R(i) = dT * C2 * Theta^(T(i-1)-20) * Phyto;
R[i] = dt * c2 * phyto * Theta1^(wTemp[i] - 20)
# Mass balance equation for dissolved oxygen
doPredic[i] = doPredic[i-1] + fatm[i] + gpp[i] - R[i]
}
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
phyto = 7 # Assumed value of phytoplankton biomass ug/L
Theta1 = 1.08 #
c1 = 0.0012
c2 = 0
k = 0.15   # (meters/day) Exchange coefficient (usually depends on wind and turbulence)
# Cycle through the model with 48 time steps per day (i.e., every 30 min)
for(i in 2:len){
# if water temp is missing, use previous value
if(is.na(wTemp[i])){
wTemp[i] = wTemp[i-1]
}
# if PAR is missing, use previous value
if(is.na(par[i])){
par[i] = par[i-1]
}
# Calculate the saturation value of dissolved oxygen as a function of temperature
dosat[i] = -0.00006 * wTemp[i]^3 + 0.0069 * wTemp[i]^2 - 0.3906 * wTemp[i] + 14.578
# Atmospheric exchange
fatm[i] = (dosat[i] - doPredic[i-1]) * k * zmix * dt #units should be mg/L/30min
# Primary production
gpp[i] = dt * par[i] * phyto * c1 * Theta1^(wTemp[i] - 20)
# R as a function of phyto biomass
#R(i) = dT * C2 * Theta^(T(i-1)-20) * Phyto;
R[i] = dt * c2 * phyto * Theta1^(wTemp[i] - 20)
# Mass balance equation for dissolved oxygen
doPredic[i] = doPredic[i-1] + fatm[i] + gpp[i] - R[i]
}
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
phyto = 7 # Assumed value of phytoplankton biomass ug/L
ThetaNPP = 1.08 #
ThetaR = 1.08
c1 = 0.0012
c2 = 0
k = 0.15   # (meters/day) Exchange coefficient (usually depends on wind and turbulence)
# Cycle through the model with 48 time steps per day (i.e., every 30 min)
for(i in 2:len){
# if water temp is missing, use previous value
if(is.na(wTemp[i])){
wTemp[i] = wTemp[i-1]
}
# if PAR is missing, use previous value
if(is.na(par[i])){
par[i] = par[i-1]
}
# Calculate the saturation value of dissolved oxygen as a function of temperature
dosat[i] = -0.00006 * wTemp[i]^3 + 0.0069 * wTemp[i]^2 - 0.3906 * wTemp[i] + 14.578
# Atmospheric exchange
fatm[i] = (dosat[i] - doPredic[i-1]) * k * zmix * dt #units should be mg/L/30min
# Primary production
gpp[i] = dt * par[i] * phyto * c1 * ThetaNPP^(wTemp[i] - 20)
# R as a function of phyto biomass
#R(i) = dT * C2 * Theta^(T(i-1)-20) * Phyto;
R[i] = dt * c2 * phyto * ThetaR^(wTemp[i] - 20)
# Mass balance equation for dissolved oxygen
doPredic[i] = doPredic[i-1] + fatm[i] + gpp[i] - R[i]
}
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
phyto = 7 # Assumed value of phytoplankton biomass ug/L
ThetaNPP = 1.1 #
ThetaR = 1.08
c1 = 0.0012
c2 = 0
k = 0.15   # (meters/day) Exchange coefficient (usually depends on wind and turbulence)
# Cycle through the model with 48 time steps per day (i.e., every 30 min)
for(i in 2:len){
# if water temp is missing, use previous value
if(is.na(wTemp[i])){
wTemp[i] = wTemp[i-1]
}
# if PAR is missing, use previous value
if(is.na(par[i])){
par[i] = par[i-1]
}
# Calculate the saturation value of dissolved oxygen as a function of temperature
dosat[i] = -0.00006 * wTemp[i]^3 + 0.0069 * wTemp[i]^2 - 0.3906 * wTemp[i] + 14.578
# Atmospheric exchange
fatm[i] = (dosat[i] - doPredic[i-1]) * k * zmix * dt #units should be mg/L/30min
# Primary production
gpp[i] = dt * par[i] * phyto * c1 * ThetaNPP^(wTemp[i] - 20)
# R as a function of phyto biomass
#R(i) = dT * C2 * Theta^(T(i-1)-20) * Phyto;
R[i] = dt * c2 * phyto * ThetaR^(wTemp[i] - 20)
# Mass balance equation for dissolved oxygen
doPredic[i] = doPredic[i-1] + fatm[i] + gpp[i] - R[i]
}
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
exists(doobs)
exists("doobs")
exists("hummk")
r
R
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
LoadData
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
R
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
R
dt
gpp
R
Fatm
fatm
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
R
# Plot the fluxes
plot(doobs[1:len,1],gpp,type='l',col='green',x="",y="Rates",main="")
# Plot the fluxes
plot(doobs[1:len,1],gpp,type='l',col='green',xlab="",y="Rates",main="")
length(doobs[1:len,1])
length(gpp)
head(gpp)
length(doPredic)
dim(gpp)
length(gpp)
# Plot the fluxes
plot(doobs[1:len,1],gpp,type='l',col='green',xlab="",y="Rates",main="")
plot(1:10000,gpp,type='l',col='green',xlab="",y="Rates",main="")
length(gpp)
plot(1:10000,gpp,type='l',col='green',xlab="",y="Rates",main="")
plot(1:10000,gpp[1:len],type='l',col='green',xlab="",y="Rates",main="")
plot(doobs[1:100,1],gpp[1:100],type='l',col='green',xlab="",y="Rates",main="")
# Plot the predictions
plot(doobs[1:len,1],doobs[1:len,2],type="l")
lines(doobs[1:len,1],doPredic,col="red")
plot(doobs[1:len,1],gpp,type='l',col='green',xlab="",y="Rates",main="")
plot(doobs[1:100,1],gpp[1:100],type='l',col='green',xlab="",y="Rates",main="")
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
plot(doobs[1:len,1],gpp,type='l',col='green',xlab="",y="Rates",main="")
gpp
length(gpp)
source("~/Dropbox/Hanson/Conferences/2022 Sept LE2022 Metabolism/DO Model/gstpMetabModel.R")
